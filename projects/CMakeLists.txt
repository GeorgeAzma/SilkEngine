macro(subdirList result curdir)
  file(GLOB CHILDREN RELATIVE ${curdir} ${curdir}/*)
  set(DIR_LIST "")
  foreach(CHILD ${CHILDREN})
    if(IS_DIRECTORY ${curdir}/${CHILD})
      list(APPEND DIR_LIST ${CHILD})
    endif()
  endforeach()
  set(${result} ${DIR_LIST})
endmacro()
    
set(CURRENT_PROJECT test_project)
set(CREATE_INSTALLER FALSE)

subdirList(PROJECTS ${CMAKE_CURRENT_SOURCE_DIR})
foreach(PROJECT ${PROJECTS})
    if(${PROJECT} STREQUAL ${CURRENT_PROJECT})   
        project(${PROJECT} VERSION 1.0.0 LANGUAGES CXX)
        set(PROJECT_BINARY_DIR ${PROJECT_BINARY_DIR}/${PROJECT})
        set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
        add_executable(${PROJECT} "")
        file(GLOB_RECURSE PROJECT_SOURCES "${PROJECT}/*.cpp")
        target_sources(${PROJECT} PRIVATE ${PROJECT_SOURCES})
        target_include_directories(${PROJECT} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT}/src)
        target_link_libraries(${PROJECT} ${ENGINE_NAME})
        file(COPY ${CMAKE_SOURCE_DIR}/res DESTINATION ${PROJECT_BINARY_DIR})
        target_compile_definitions(${ENGINE_NAME} PRIVATE "SK_CLIENT")
        if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT}/res)
            file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT}/res DESTINATION ${PROJECT_BINARY_DIR})
        endif()
        if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT}/CMakeLists.txt)
            add_subdirectory(${PROJECT})
        endif()

        if(CREATE_INSTALLER)
            message("Added ${PROJECT} Installer")
            set(ICON_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT}/res/images/icons\\\\icon.ico)
            set(LICENSE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT}/res/text/License.txt)
            install(TARGETS ${PROJECT} DESTINATION .)
            install(DIRECTORY ${PROJECT_BINARY_DIR}/res DESTINATION .)
            if(EXISTS ${ICON_PATH})
                set(CPACK_NSIS_MUI_ICON ${ICON_PATH})
                set(CPACK_NSIS_MUI_UNIICON ${ICON_PATH})
                set(CPACK_NSIS_INSTALLED_ICON_NAME ${ICON_PATH})
            endif()
            if(EXISTS ${LICENSE_PATH})
                set(CPACK_RESOURCE_FILE_LICENSE ${LICENSE_PATH})
            endif()
            #set(CPACK_PACKAGE_ICON ${ICON_PATH})
            include(CPack)
        endif()
	    message("Added Project ${PROJECT}")
    endif()
endforeach()