cmake_minimum_required(VERSION 3.20)

include(FetchContent)
include(ExternalProject)

set(MSVC_INCREMENTAL_DEFAULT ON)
set(CMAKE_CXX_STANDARD 20)
set(CXX_STANDARD_REQUIRED True)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install)
set(CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX}/include)
set(CMAKE_INSTALL_LIBDIR ${CMAKE_INSTALL_PREFIX}/lib)
set(CMAKE_INSTALL_DOCDIR ${CMAKE_INSTALL_PREFIX}/doc)
set(CMAKE_INSTALL_BINDIR ${CMAKE_INSTALL_PREFIX}/bin)
set(CMAKE_DISABLE_SOURCE_CHANGES ON)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)

# Get rid of console window in release build
if(MSVC)
    set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup")
endif()

project(SilkEngine VERSION 1.0.0 LANGUAGES C CXX)

add_compile_definitions(
_USE_MATH_DEFINES
GLFW_INCLUDE_NONE
)

#|-----Vendor-----|#

# Vulkan
find_package(Vulkan REQUIRED)
list(APPEND INCLUDE_DIRS ${Vulkan_INCLUDE_DIRS})
list(APPEND EXTRA_LIBS ${Vulkan_LIBRARIES})

string(FIND ${Vulkan_LIBRARIES} "/Lib" Vulkan_PATH_POS)
string(SUBSTRING ${Vulkan_LIBRARIES} 0 ${Vulkan_PATH_POS} VULKAN_PATH)
list(APPEND EXTRA_LIBS 
    ${VULKAN_PATH}/Lib/${CMAKE_STATIC_LIBRARY_PREFIX}shaderc_combined$<$<CONFIG:DEBUG>:d>${CMAKE_STATIC_LIBRARY_SUFFIX}
)

macro(externalProject)
    set(one_value_args NAME INCLUDE_DIR)
    set(multi_value_args BUILD_ARGS DEPENDS_ON)
    cmake_parse_arguments(SUBPROJECT "" "${one_value_args}" "${multi_value_args}" ${ARGN})
    ExternalProject_Add(${SUBPROJECT_NAME}
        PREFIX ${SUBPROJECT_NAME}
        URL ${CMAKE_SOURCE_DIR}/ext/${SUBPROJECT_NAME}.zip
        CMAKE_ARGS 
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
            -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
            -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
            -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
            -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}
            -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}
            -DCMAKE_INSTALL_DOCDIR=${CMAKE_INSTALL_DOCDIR}
            -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}
            ${SUBPROJECT_BUILD_ARGS}
        DEPENDS ${SUBPROJECT_DEPENDS_ON}
        BUILD_ALWAYS OFF
        UPDATE_COMMAND ""
        DOWNLOAD_EXTRACT_TIMESTAMP ON
    )
    if(SUBPROJECT_DEPENDS_ON)
        ExternalProject_Add_StepDependencies(${SUBPROJECT_NAME} build ${SUBPROJECT_DEPENDS_ON})
    endif()
    if(SUBPROJECT_INCLUDE_DIR)
        list(APPEND INCLUDE_DIRS ${CMAKE_INSTALL_PREFIX}/include/${SUBPROJECT_INCLUDE_DIR})
    endif()
    list(APPEND DEPENDENCIES_TO_ADD ${SUBPROJECT_NAME})
endmacro() 

macro(externalProjectGit)
    set(one_value_args NAME GIT_REPO GIT_TAG INCLUDE_DIR)
    set(multi_value_args BUILD_ARGS DEPENDS_ON)
    cmake_parse_arguments(SUBPROJECT "" "${one_value_args}" "${multi_value_args}" ${ARGN})
    ExternalProject_Add(${SUBPROJECT_NAME}
        PREFIX ${SUBPROJECT_NAME}
        GIT_REPOSITORY ${GIT_REPO}
        GIT_TAG ${GIT_TAG}
        GIT_SHALLOW ON
        CMAKE_ARGS 
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
            -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
            -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
            -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
            -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}
            -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}
            -DCMAKE_INSTALL_DOCDIR=${CMAKE_INSTALL_DOCDIR}
            -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}
            ${SUBPROJECT_BUILD_ARGS}
        DEPENDS ${SUBPROJECT_DEPENDS_ON}
        BUILD_ALWAYS OFF
        UPDATE_COMMAND ""
        DOWNLOAD_EXTRACT_TIMESTAMP ON
    )
    if(SUBPROJECT_DEPENDS_ON)
        ExternalProject_Add_StepDependencies(${SUBPROJECT_NAME} build ${SUBPROJECT_DEPENDS_ON})
    endif()
    if(SUBPROJECT_INCLUDE_DIR)
        list(APPEND INCLUDE_DIRS ${CMAKE_INSTALL_PREFIX}/include/${SUBPROJECT_INCLUDE_DIR})
    endif()
    list(APPEND DEPENDENCIES_TO_ADD ${SUBPROJECT_NAME})
endmacro() 

# External Projects
externalProject(NAME freetype INCLUDE_DIR freetype2)
externalProject(NAME glfw BUILD_ARGS
    -DGLFW_BUILD_EXAMPLES=OFF
    -DGLFW_BUILD_DOCS=OFF
    -DGLFW_BUILD_TESTS=OFF
)
externalProject(NAME assimp BUILD_ARGS 
    -DASSIMP_BUILD_ALL_IMPORTERS_BY_DEFAULT=OFF
    -DASSIMP_BUILD_ALL_EXPORTERS_BY_DEFAULT=OFF
    -DASSIMP_BUILD_ASSIMP_TOOLS=OFF
    -DASSIMP_BUILD_TESTS=OFF
    -DASSIMP_NO_EXPORT=ON
    -DASSIMP_BUILD_FBX_IMPORTER=ON
    -DASSIMP_BUILD_OBJ_IMPORTER=ON
    -DASSIMP_BUILD_glTF_IMPORTER=ON
    -DASSIMP_BUILD_glTF2_IMPORTER=ON
    -DASSIMP_BUILD_ZLIB=ON
    -DBUILD_SHARED_LIBS=OFF
)
externalProject(NAME openal BUILD_ARGS
    -DALSOFT_INSTALL_EXAMPLES=OFF
    -DALSOFT_INSTALL_AMBDEC_PRESETS=OFF
    -DALSOFT_INSTALL_CONFIG=OFF
    -DALSOFT_INSTALL_UTILS=OFF
    -DALSOFT_INSTALL_HRTF_DATA=OFF
    -DALSOFT_EXAMPLES=OFF
    -DALSOFT_UTILS=OFF
    -DALSOFT_NO_CONFIG_UTIL=ON
    -DLIBTYPE=STATIC
)
externalProject(NAME spirv_cross BUILD_ARGS 
    -DSPIRV_CROSS_CLI=OFF
    -DSPIRV_CROSS_ENABLE_TESTS=OFF
    -DSPIRV_CROSS_ENABLE_HLSL=OFF
    -DSPIRV_CROSS_ENABLE_MSL=OFF
)

macro(subdirList result curdir)
    file(GLOB children RELATIVE ${curdir} ${curdir}/*)
    set(dirlist "")
    foreach(child ${children})
      if(IS_DIRECTORY ${curdir}/${child})
        list(APPEND dirlist ${child})
      endif()
    endforeach()
    set(${result} ${dirlist})
endmacro()

list(APPEND INCLUDE_DIRS ${CMAKE_INSTALL_PREFIX}/include)

subdirList(INCLUDE_SUBDIRS ${CMAKE_SOURCE_DIR}/ext)
if(INCLUDE_SUBDIRS)
    foreach(subdir ${INCLUDE_SUBDIRS})
        list(APPEND INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/ext/${subdir})
    endforeach()
endif()
list(APPEND INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/ext/spdlog/include)

file(GLOB_RECURSE EXTERNAL_PROJECT_LIBS "${CMAKE_INSTALL_PREFIX}/*${CMAKE_STATIC_LIBRARY_SUFFIX}")
if(EXTERNAL_PROJECT_LIBS)
    list(APPEND EXTRA_LIBS ${EXTERNAL_PROJECT_LIBS})
endif()

# |-----Sub Directories-----|
add_subdirectory("silk_engine")
add_subdirectory("src")