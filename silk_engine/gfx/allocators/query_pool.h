#pragma once

class QueryPool
{
public:
	enum QueryType : std::underlying_type_t<VkQueryType>
	{
		OCCLUSION = VK_QUERY_TYPE_OCCLUSION,
		PIPELINE_STATISTICS = VK_QUERY_TYPE_PIPELINE_STATISTICS,
		TIMESTAMP = VK_QUERY_TYPE_TIMESTAMP,
		PERFORMANCE_QUERY_KHR = VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR,
	};

	typedef VkQueryPipelineStatisticFlags PipelineStatistics;
	enum PipelineStatisticBits : VkQueryPipelineStatisticFlags
	{
		INPUT_ASSEMBLY_VERTICES = VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT,
		INPUT_ASSEMBLY_PRIMITIVES = VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT,
		VERTEX_SHADER_INVOCATIONS = VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT,
		GEOMETRY_SHADER_INVOCATIONS = VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT,
		GEOMETRY_SHADER_PRIMITIVES = VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT,
		CLIPPING_INVOCATIONS = VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT,
		CLIPPING_PRIMITIVES = VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT,
		FRAGMENT_SHADER_INVOCATIONS = VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT,
		TESSELLATION_CONTROL_SHADER_PATCHES = VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT,
		TESSELLATION_EVALUATION_SHADER_INVOCATIONS = VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT,
		COMPUTE_SHADER_INVOCATIONS = VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT,
		TASK_SHADER_INVOCATIONS = VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT,
		MESH_SHADER_INVOCATIONS = VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT
	};

public:
	QueryPool(QueryType query_type = OCCLUSION, uint32_t query_count = 1);
	QueryPool(PipelineStatistics pipeline_statistics, uint32_t query_count = 1);
	~QueryPool();

	void begin(uint32_t index = 0);
	void end(uint32_t index = 0);

	uint64_t getOcclusionResult(uint32_t index = 0, bool wait = false);
	std::vector<uint32_t> getResults(uint32_t index = 0, bool wait = false);

	operator const VkQueryPool& () const { return query_pool; }

private:
	VkQueryPool query_pool = nullptr;
	QueryType query_type = QueryType(0);
	PipelineStatistics pipeline_statistics = 0;
	std::vector<VkBool32> queries = {};
};