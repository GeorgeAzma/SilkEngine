layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout(set = 0, binding = 0) writeonly buffer Blocks
{
    uint blocks[VOLUME];
    uint fill;
};

layout(push_constant) uniform PushConstant
{
    ivec4 chunk_position;
};

#include "chunk.glsl"

float rand(vec2 n) { return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453); }

#if 0
float noise(vec2 p)
{
    vec2 ip = floor(p);
    vec2 u = fract(p);
    u = u*u*(3.0-2.0*u);
    float res = mix(
        mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),
        mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);
    return res*res;
}
#else
const int perm[256] =
{
    151, 160, 137, 91, 90, 15,
    131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
    190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
    88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
    77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
    102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
    135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
    5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
    223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
    129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
    251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
    49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
};

int hash(int i)
{
    return perm[i];
}

float grad(int hash, vec2 p)
{
    const int h = hash & 0x3F;
    const float u = h < 4 ? p.x : p.y;
    const float v = h < 4 ? p.y : p.x;
    return ((h & 1) > 0 ? -u : u) + ((h & 2) > 0 ? -2.0f * v : 2.0f * v);
}
    
float noise(vec2 p)
{
    float n0, n1, n2;
    const float F2 = 0.366025403f;
    const float G2 = 0.211324865f;
    const float s = (p.x + p.y) * F2;
    const vec2 ps = p + s;
    const ivec2 ij = ivec2(floor(ps));
    const float t = float(ij.x + ij.y) * G2;
    const vec2 P0 = ij - t;
    const vec2 p0 = p - P0;
    ivec2 ij1;
    if (p0.x > p0.y) 
        ij1 = ivec2(1, 0);
    else 
        ij1 = ivec2(0, 1);
    const vec2 p1 = p0 - ij1 + G2;
    const vec2 p2 = p0 - 1.0f + 2.0f * G2;
    const int gi0 = hash(ij.x + hash(ij.y));
    const int gi1 = hash(ij.x + ij1.x + hash(ij.y + ij1.y));
    const int gi2 = hash(ij.x + 1 + hash(ij.y + 1));
    float t0 = 0.5f - p0.x * p0.x - p0.y * p0.y;
    if (t0 < 0.0f)
        n0 = 0.0f;
    else
    {
        t0 *= t0;
        n0 = t0 * t0 * grad(gi0, p0);
    }
    float t1 = 0.5f - p1.x * p1.x - p1.y * p1.y;
    if (t1 < 0.0f)
        n1 = 0.0f;
    else
    {
        t1 *= t1;
        n1 = t1 * t1 * grad(gi1, p1);
    }
    float t2 = 0.5f - p2.x * p2.x - p2.y * p2.y;
    if (t2 < 0.0f)
        n2 = 0.0f;
    else
    {
        t2 *= t2;
        n2 = t2 * t2 * grad(gi2, p2);
    }
    return 45.23065f * (n0 + n1 + n2);
}
#endif

float fbm(vec2 p, int octaves)
{
    float n = 0.0;
    float a = 1.0;
    float norm = 0.0;
    for(int i = 0; i < octaves; ++i)
    {
      n += noise(p) * a;
      norm += a;
      p *= 2.0;
      a *= 0.5;
    }
    return n / norm;
}

void main()
{
	const int x = int(gl_GlobalInvocationID.x);
	const int y = int(gl_GlobalInvocationID.y);
	const int z = int(gl_GlobalInvocationID.z);
    
    int y_level = chunk_position.y * SIZE + y;
    float h = fbm(vec2(chunk_position.x * SIZE + x, chunk_position.z * SIZE + z) * 0.005, 8) * 0.5 + 0.5;
    h *= h;
    int height = int(128.0 * h);
    int delta = height - y_level;
	if (delta >= 0)
	{
        if (delta == 1)
            BLOCK = SNOW;
        else if (delta >= 2)
            BLOCK = SNOW;
        else
            BLOCK = SNOW;
		fill = NONE;
	}
	else
	{
		BLOCK = AIR;
	}
}